{"version":3,"sources":["../../src/intercom/routes.js"],"names":["router","express","Router","route","get","getAllIntercom","returnResponse","post","validate","body","schema","createIntercom","delete","clearIntercom","all","getOneTodo","patch","patchTodo","deleteTodo","req","res","next","locals","intercom","db","intercomTable","catch","err","rows","clear","status","order","position","create","getOneIntercom","todo","getById","params","id","errors","NotFound","patchIntercom","Object","assign","updatedIntercom","update","deleteIntercom","deleteById","baseUrl","protocol","json"],"mappings":"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","file":"routes.js","sourcesContent":["import express from 'express';\nimport { validate } from 'isvalid';\nimport { errors } from 'express-simple-errors';\nimport transformResponse, { schema } from './model'; // eslint-disable-line no-unused-variables\nimport db from '../db';\nconst intercomTable = 'intercom';\n\nexport default function ()  {\n  const router = express.Router();\n\n  router.route('/')\n    .get(getAllIntercom, returnResponse)\n    .post(validate.body(schema), createIntercom, returnResponse)\n    .delete(clearIntercom, returnResponse);\n\n  router.route('/:id')\n    .all(getOneTodo)\n    .get(returnResponse)\n    .patch(patchTodo, returnResponse)\n    .delete(deleteTodo, returnResponse);\n\n  async function getAllIntercom(req, res, next) {\n    res.locals.intercom = await db.all(intercomTable)\n    .catch((err) => next(err));\n    next();\n  }\n\n  async function clearIntercom(req, res, next) {\n    const rows = await db.clear(intercomTable)\n    .catch((err) => next(err));\n    res.locals.intercom = rows;\n    res.status(204);\n    next();\n  }\n\n  async function createIntercom(req, res, next) {\n    if (req.body.order) {\n      req.body.position = req.body.order;\n      delete req.body.order;\n    }\n    const intercom = await db.create(intercomTable, req.body)\n    .catch((err) => next(err));\n    res.locals.intercom = intercom[0];\n    res.status(201);\n    next();\n  }\n\n  async function getOneIntercom(req, res, next) {\n    const todo = await db.getById('intercom', req.params.id)\n    .catch((err) => next(err));\n    res.locals.intercom = intercom && intercom[0];\n    if (!res.locals.intercom) {\n      return next(new errors.NotFound('This intercom does not exist'));\n    }\n    next();\n  }\n\n  async function patchIntercom(req, res, next) {\n    const intercom = Object.assign({}, res.locals.intercom[0], req.body);\n    if (intercom.order) {\n      intercom.position = intercom.order;\n      delete intercom.order;\n    }\n\n    const updatedIntercom = await db.update(intercomTable, req.params.id, intercom)\n    .catch((err) => next(err));\n    res.locals.intercom = updatedIntercom[0];\n    next();\n  }\n\n  async function deleteIntercom(req, res, next) {\n    res.locals.intercom = await db.deleteById(intercomTable, req.params.id)\n    .catch((err) => next(err));\n    res.status(204);\n    next();\n  }\n\n  function returnResponse(req, res) {\n    // handle no responses here\n    res.locals.baseUrl = `${req.protocol}://${req.get('host')}`;\n    res.json(transformResponse(res.locals));\n  }\n\n  return router;\n}\n"]}